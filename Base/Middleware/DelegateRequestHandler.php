<?php
/*
 * This file is part of the BasePlatform project.
 *
 * @link https://github.com/BasePlatform
 * @license https://github.com/BasePlatform/Base/blob/master/LICENSE.txt
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace Base\Middleware;

use Interop\Http\Server\RequestHandlerInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Base\Exception\InternalServerError;

/**
 * PSR-15 delegate wrapper for internal callbacks generated by {@see Dispatcher} during dispatch.
 *
 * @package Base\Middleware
 */
class DelegateRequestHandler implements RequestHandlerInterface
{
    /**
     * @var Dispatcher
     */
    private $dispatcher;

    /**
     * @var RequestHandlerInterface|null
     */
    private $next;

    /**
     * @param Dispatcher                   $dispatcher
     * @param RequestHandlerInterface|null $next
     */
    public function __construct(Dispatcher $dispatcher, RequestHandlerInterface $next = null)
    {
        $this->dispatcher = $dispatcher;
        $this->next = $next;
    }

    /**
     * {@inheritdoc}
     */
    public function handle(ServerRequestInterface $request): ResponseInterface
    {
        $middlewareDefinition = $this->dispatcher->getNextMiddleware($request);
        if ($middlewareDefinition === false) {
            if ($this->next !== null) {
                return $this->next->handle($request);
            }
            throw new RuntimeException('Exhausted Processing Queue');
        }
        return $middlewareDefinition->process($request, $this);
    }
}
